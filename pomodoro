#!/usr/bin/env python

from tkinter import *
import math
import pathlib
import configparser
from pomodoro_wavplayer import play_wavefile

# ---------------------------- CONSTANTS ------------------------------- #
PINK = "#f8a89d"
RED = "#f26849"
GREEN = "#379b46"
YELLOW = "#f7f5dd"
BLACK = "#202020"
BRIGHT = "#ffffF0"
WHITE = "#ffffff"
FONT_SANS = ""
FONT_MONO = "Fira Mono"
CHECK_MARK = u"\u2713"
GEAR = u"\u26ED"
CONFIG_PATH = ".local/share/pomodoro"
CONFIG_FILE = "config.ini"
IMAGE_FILE = "tomato.png"
BREAK_START_SOUND_FILE = "break-start.wav"
BREAK_END_SOUND_FILE = "break-end.wav"
INTERVAL_SECTION = "Intervals"
WORK_KEY = "Work"
SHORT_BREAK_KEY = "ShortBreak"
LONG_BREAK_KEY = "LongBreak"

# ---------------------------- VARIABLES ------------------------------- #

reps = 0
timer = None

# ---------------------------- CONFIG SAVE/LOAD ------------------------ #


def force_directory():
    directory = (pathlib.Path.home() / CONFIG_PATH)
    if not directory.exists():
        directory.mkdir(parents=True)


def read_config():
    force_directory()
    config_file = pathlib.Path.home() / CONFIG_PATH / CONFIG_FILE
    if config_file.exists():
        with config_file.open(mode="r") as fd:
            config = configparser.ConfigParser()
            config.optionxform = str
            config.read_file(fd)
            if config.has_option(INTERVAL_SECTION, WORK_KEY):
                work_min.set(f"{strip_number(config.get(INTERVAL_SECTION, WORK_KEY))} min")
            if config.has_option(INTERVAL_SECTION, SHORT_BREAK_KEY):
                short_break_min.set(f"{strip_number(config.get(INTERVAL_SECTION, SHORT_BREAK_KEY))} min")
            if config.has_option(INTERVAL_SECTION, LONG_BREAK_KEY):
                long_break_min.set(f"{strip_number(config.get(INTERVAL_SECTION, LONG_BREAK_KEY))} min")


def write_config():
    force_directory()
    config = configparser.ConfigParser()
    config.optionxform = str
    config.add_section(INTERVAL_SECTION)
    config.set(INTERVAL_SECTION, WORK_KEY, str(strip_number(work_min.get())))
    config.set(INTERVAL_SECTION, SHORT_BREAK_KEY, str(strip_number(short_break_min.get())))
    config.set(INTERVAL_SECTION, LONG_BREAK_KEY, str(strip_number(long_break_min.get())))
    config_file = pathlib.Path.home() / CONFIG_PATH / CONFIG_FILE
    with config_file.open(mode="w") as fd:
        config.write(fd)

# ---------------------------- TIMER RESET ------------------------------- #


def reset():
    global reps
    global timer
    sanitize_inputs()
    write_config()
    check_mark.configure(text="")
    title_label.configure(text="Timer", fg=GREEN)
    canvas.itemconfig(timer_text, text="0:00")
    reps = 0
    if timer is not None:
        window.after_cancel(timer)
    timer = None

# ---------------------------- TIMER MECHANISM ------------------------------- #


def strip_number(value_string):
    idx = len(value_string)
    for i, c in enumerate(value_string):
        if not c.isdigit():
            idx = i
            break
    if idx > 0:
        s = value_string[:idx]
        return int(s)
    else:
        return 0


def start():
    global reps
    global timer
    if timer is not None:
        return
    sanitize_inputs()
    write_config()
    if reps % 8 == 0:
        # Reset the check marks:
        check_mark.configure(text="")
    reps += 1
    if reps % 8 == 0:
        time = strip_number(long_break_min.get())
        title_label.configure(text="Break", fg=RED)
    elif reps % 2 == 0:
        time = strip_number(short_break_min.get())
        title_label.configure(text="Break", fg=PINK)
    else:
        time = strip_number(work_min.get())
        title_label.configure(text="Work", fg=GREEN)
    count_down(time * 60)


# ---------------------------- COUNTDOWN MECHANISM ------------------------------- #


def count_down(count):
    global reps
    global timer
    global break_start_sound_file
    global break_end_sound_file
    mins = math.floor(count/60)
    sec = int(count % 60)
    if sec < 10:
        sec = f"0{sec}"
    canvas.itemconfig(timer_text, text=f"{mins}:{sec}")
    if count > 0:
        timer = window.after(1000, count_down, count - 1)
    else:
        timer = None
        start()
        if reps % 2 == 0:
            # Another work period completed. Add one check mark:
            check_mark.configure(text=check_mark.cget("text") + CHECK_MARK)
            # Play sound:
            if break_start_sound_file.exists():
                play_wavefile(str(break_start_sound_file), "pomodoro")
        else:
            # Another break completed. Play sound:
            if break_end_sound_file.exists():
                play_wavefile(str(break_end_sound_file), "pomodoro")


# ---------------------------- UI INTERACTION ------------------------- #


def sanitize_and_format(minutes):
    sanitized_minutes = max(1, min(99, int(minutes)))
    return f"{sanitized_minutes} min"


def sanitize_inputs():
    work_min.set(sanitize_and_format(strip_number(work_min.get())))
    short_break_min.set(sanitize_and_format(strip_number(short_break_min.get())))
    long_break_min.set(sanitize_and_format(strip_number(long_break_min.get())))



def switch_options_visible(visible):
    global config_visible
    config_visible = visible
    if visible:
        sanitize_inputs()
        write_config()
        work_entry.grid(column=0, row=1, sticky=N+E+S+W, padx=5)
        work_label.grid(column=0, row=0, sticky=W, padx=5)
        spause_entry.grid(column=1, row=1, sticky=N+E+S+W, padx=5)
        spause_label.grid(column=1, row=0, sticky=W, padx=5)
        lpause_entry.grid(column=2, row=1, sticky=N+E+S+W, padx=5)
        lpause_label.grid(column=2, row=0, sticky=W, padx=5)
    else:
        work_entry.grid_forget()
        work_label.grid_forget()
        spause_entry.grid_forget()
        spause_label.grid_forget()
        lpause_entry.grid_forget()
        lpause_label.grid_forget()


# ---------------------------- UI SETUP ------------------------------- #

config_visible = False
window = Tk()
window.title("Pomodoro")
window.configure(bg=YELLOW, padx=10, pady=10)
window.resizable(False, False)

work_min = StringVar()
work_min.set("25 min")
short_break_min = StringVar()
short_break_min.set("5 min")
long_break_min = StringVar()
long_break_min.set("20 min")

work_entry = Entry(textvariable=work_min, width=9, relief="flat", fg=BLACK, bg=WHITE, highlightthickness=0)
work_label = Label(text="Work", fg=BLACK, bg=YELLOW)

spause_entry = Entry(textvariable=short_break_min, width=8, relief="flat", fg=BLACK, bg=WHITE,highlightthickness=0)
spause_label = Label(text="Break", fg=BLACK, bg=YELLOW)

lpause_entry = Entry(textvariable=long_break_min, width=8, relief="flat", fg=BLACK, bg=WHITE,highlightthickness=0)
lpause_label = Label(text="Long break", fg=BLACK, bg=YELLOW)

config_btn = Button(text=GEAR, borderwidth=0, fg=BLACK, bg=BRIGHT, activebackground=BRIGHT, font=(FONT_SANS, 24, "normal"), highlightthickness=0, command=lambda: switch_options_visible(not config_visible))
config_btn.grid(column=3, row=0, rowspan=2, sticky=E)

canvas = Canvas(width=200, height=224, bg=YELLOW, highlightthickness=0)
break_start_sound_file = pathlib.Path.home() / CONFIG_PATH / BREAK_START_SOUND_FILE
break_end_sound_file = pathlib.Path.home() / CONFIG_PATH / BREAK_END_SOUND_FILE
tomato_file = pathlib.Path.home() / CONFIG_PATH / IMAGE_FILE
if tomato_file.exists():
    tomato_img = PhotoImage(file=tomato_file)
    canvas.create_image(100, 112, image=tomato_img)
timer_text = canvas.create_text(100, 130, text="0:00", fill=WHITE, font=(FONT_MONO, 24, "normal"))
canvas.grid(column=1, row=3, columnspan=2)

title_label = Label(text="Timer", fg=GREEN, bg=YELLOW, font=(FONT_SANS, 24, "normal"))
title_label.grid(column=1, row=2, columnspan=2)

bottom_spacer = Label(text="", bg=YELLOW)
bottom_spacer.grid(column=2, row=4, columnspan=2)

start_btn = Button(text="Start", borderwidth=0, fg=BLACK, bg=BRIGHT, activebackground=BRIGHT, font=(FONT_SANS, 18, "normal"), command=start, highlightthickness=0)
start_btn.grid(column=0, row=5)

reset_btn = Button(text="Reset", borderwidth=0, fg=BLACK, bg=BRIGHT, activebackground=BRIGHT, font=(FONT_SANS, 18, "normal"), command=reset, highlightthickness=0)
reset_btn.grid(column=3, row=5)

check_mark = Label(text="", anchor="center", fg=GREEN, bg=YELLOW, font=(FONT_MONO, 20, "normal"))
check_mark.grid(column=1, row=5, columnspan=2)

read_config()
switch_options_visible(False)
window.mainloop()
sanitize_inputs()
write_config()

